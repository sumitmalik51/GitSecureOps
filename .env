# Environment Configuration for GitHub OAuth

# Copy this file to .env and fill in your values

# GitHub OAuth App Configuration
# Create a GitHub OAuth App at: https://github.com/settings/applications/new
VITE_GITHUB_CLIENT_ID=Ov23liCMUV3VHCwCWZMi
VITE_GITHUB_CLIENT_SECRET=654a03bdf3bda417f33a5db98318e292a4132763

# For Azure Static Web Apps deployment
REACT_APP_GITHUB_CLIENT_ID=Ov23liCMUV3VHCwCWZMi
REACT_APP_GITHUB_REDIRECT_URI=https://func-gh-prod.azurewebsites.net/api/github-callback

# OAuth Redirect URI (should match your OAuth app settings and Azure Function)
# For development: http://localhost:4280/api/github-callback (SWA CLI)
# For production: https://your-static-web-app.azurestaticapps.net/api/github-callback
VITE_GITHUB_REDIRECT_URI=https://func-gh-prod.azurewebsites.net/api/github-callback

# Azure OpenAI Configuration for Smart Recommendations
VITE_AZURE_OPENAI_ENDPOINT=
VITE_AZURE_OPENAI_API_KEY=
VITE_AZURE_OPENAI_DEPLOYMENT_NAME=
VITE_AZURE_OPENAI_API_VERSION=

# GitHub Personal Access Token for API access
# Note: Users will provide their PAT during authentication flow
# GITHUB_TOKEN=will-be-provided-during-login

# Instructions:
# 1. Copy this file to .env: cp .env.example .env
# 2. Azure OpenAI is already configured with your credentials
# 3. GitHub OAuth setup is optional for basic Smart Recommendations testing
# 4. For full GitHub integration, users will authenticate with their PAT during login
# 5. Start the development server: npm run dev

# ðŸ”” NEW: Real-time Notifications System
# - Browser notifications for important events
# - Slack integration for team collaboration
# - Microsoft Teams integration for enterprise workflows
# - Configurable notification rules and preferences
# - Test notifications to verify integrations
# 
# To set up integrations:
# 1. Click the notification bell (ðŸ””) in the header
# 2. Go to notification settings to configure Slack/Teams webhooks
# 3. Test integrations before important operations

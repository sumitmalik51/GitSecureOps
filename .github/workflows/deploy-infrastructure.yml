name: Deploy Infrastructure to Azure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      region:
        description: 'Azure region'
        required: true
        default: 'eastus'
        type: string

env:
  NODE_VERSION: '20.x'

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Upgrade Azure CLI and Bicep
      run: |
        echo "Upgrading Azure CLI and Bicep..."
        az --version
        az bicep upgrade
        az bicep version
        echo "Upgrade completed!"

    - name: Create Resource Group
      run: |
        $resourceGroup = "rg-gitsecureops-${{ inputs.environment }}"
        Write-Host "Creating resource group: $resourceGroup"
        New-AzResourceGroup -Name $resourceGroup -Location "${{ inputs.region }}" -Tag @{"azd-env-name"="${{ inputs.environment }}"} -Force
      shell: pwsh

    - name: Deploy Infrastructure
      run: |
        $resourceGroup = "rg-gitsecureops-${{ inputs.environment }}"
        $resourceToken = -join ((1..6) | ForEach {'{0:X}' -f (Get-Random -Max 16)})
        
        Write-Host "Deploying infrastructure to ${{ inputs.environment }} environment..."
        Write-Host "Using resource token: $resourceToken"
        
        # Compile Bicep to ARM first
        Write-Host "Compiling Bicep to ARM template..."
        az bicep build --file infra/main-resources.bicep --outfile main-resources-compiled.json
        
        # Deploy using PowerShell (avoids Azure CLI JSON parsing bug)
        Write-Host "Deploying ARM template with PowerShell..."
        $secureSecret = ConvertTo-SecureString "${{ secrets.GH_WEB_APP_SECRET }}" -AsPlainText -Force
        $deployment = New-AzResourceGroupDeployment `
          -ResourceGroupName $resourceGroup `
          -TemplateFile "main-resources-compiled.json" `
          -environmentName "${{ inputs.environment }}" `
          -location "${{ inputs.region }}" `
          -resourceToken $resourceToken `
          -resourcePrefix "gh" `
          -githubClientId "${{ secrets.GH_WEB_APP }}" `
          -githubRedirectUri "https://placeholder.azurestaticapps.net/oauth-callback" `
          -githubClientSecret $secureSecret `
          -Verbose
        
        Write-Host "Waiting for resources to be available..."
        Start-Sleep -Seconds 20
        
        # Get the SWA URL from the deployment outputs or resource group
        Write-Host "Querying deployed resources..."
        $swaResources = Get-AzStaticWebApp -ResourceGroupName $resourceGroup
        
        if ($swaResources -and $swaResources.Count -gt 0) {
          $swaUrl = $swaResources[0].DefaultHostname
          Write-Host "‚úÖ App deployed: https://$swaUrl"
          Write-Host "üìã OAuth Redirect URI: https://$swaUrl/oauth-callback"
        } else {
          Write-Host "‚ùå Could not retrieve Static Web App URL"
          Write-Host "Checking deployed resources..."
          Get-AzResource -ResourceGroupName $resourceGroup | Format-Table Name, ResourceType
          exit 1
        }
      shell: pwsh

    - name: Azure logout
      run: az logout
      if: always()
name: Deploy Infrastructure to Azure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      region:
        description: 'Azure region'
        required: true
        default: 'eastus2'
        type: string

env:
  NODE_VERSION: '20.x'

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install Azure PowerShell Module
      run: |
        Write-Host "Installing Azure PowerShell Module..."
        Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force -AllowClobber
        Write-Host "Azure PowerShell Module installed successfully!"
      shell: pwsh

    - name: Connect to Azure PowerShell
      run: |
        Write-Host "Connecting to Azure PowerShell..."
        # Parse the service principal credentials from the secret
        $creds = '${{ secrets.AZURE_CREDENTIALS }}' | ConvertFrom-Json
        $securePassword = ConvertTo-SecureString $creds.clientSecret -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($creds.clientId, $securePassword)
        Connect-AzAccount -ServicePrincipal -Credential $credential -TenantId $creds.tenantId -SubscriptionId $creds.subscriptionId
        Set-AzContext -SubscriptionId $creds.subscriptionId
        Write-Host "Connected to Azure PowerShell successfully!"
      shell: pwsh


    - name: Create Resource Group
      run: |
        $resourceGroup = "rg-gitsecureops-${{ inputs.environment }}"
        Write-Host "Creating resource group: $resourceGroup"
        New-AzResourceGroup -Name $resourceGroup -Location "${{ inputs.region }}" -Tag @{"azd-env-name"="${{ inputs.environment }}"} -Force
      shell: pwsh

    - name: Deploy Infrastructure
      run: |
        $resourceGroup = "rg-gitsecureops-${{ inputs.environment }}"
        # Use environment name as resource token for consistent naming
        $resourceToken = "${{ inputs.environment }}"
        
        Write-Host "Deploying infrastructure to ${{ inputs.environment }} environment..."
        Write-Host "Using resource token: $resourceToken (consistent naming)"
        
        # Check if Function App already exists and get its URL for OAuth callback
        Write-Host "Checking for existing Function App..."
        $resourceToken = "${{ inputs.environment }}"
        $functionAppName = "func-gh-$resourceToken"
        
        try {
          $existingFunctionApp = Get-AzWebApp -ResourceGroupName $resourceGroup -Name $functionAppName -ErrorAction SilentlyContinue
          if ($existingFunctionApp) {
            $functionAppUrl = "https://$($existingFunctionApp.DefaultHostName)"
            Write-Host "Found existing Function App: $functionAppUrl"
            $redirectUri = "$functionAppUrl/api/github-callback"
          } else {
            # For initial deployment, use predictable Function App URL
            $redirectUri = "https://$functionAppName.azurewebsites.net/api/github-callback"
            Write-Host "No existing Function App found, using predictable URL for initial deployment"
          }
        }
        catch {
          # Fallback to predictable URL
          $redirectUri = "https://$functionAppName.azurewebsites.net/api/github-callback"
          Write-Host "Using predictable Function App URL for OAuth callback"
        }
        
        $secureSecret = ConvertTo-SecureString "${{ secrets.GH_WEB_APP_SECRET }}" -AsPlainText -Force
        
        # Deploy using PowerShell directly with Bicep (no compilation needed)
        Write-Host "Deploying Bicep template directly with PowerShell..."
        
        try {
          Write-Host "Starting deployment with redirect URI: $redirectUri"
          
          $deployment = New-AzResourceGroupDeployment `
            -ResourceGroupName $resourceGroup `
            -TemplateFile "infra/main-resources.bicep" `
            -environmentName "${{ inputs.environment }}" `
            -location "${{ inputs.region }}" `
            -resourceToken $resourceToken `
            -resourcePrefix "gh" `
            -githubClientId "${{ secrets.GH_WEB_APP }}" `
            -githubRedirectUri $redirectUri `
            -githubClientSecret $secureSecret `
            -Verbose
        }
        catch {
          Write-Host "‚ùå Deployment failed with error: $($_.Exception.Message)"
          Write-Host "Full error details:"
          Write-Host $_.Exception
          exit 1
        }
        
        Write-Host "Waiting for resources to be available..."
        Start-Sleep -Seconds 20
        
        # Get the SWA URL from the deployment outputs or resource group
        Write-Host "Querying deployed resources..."
        $swaResources = Get-AzStaticWebApp -ResourceGroupName $resourceGroup
        
        if ($swaResources -and $swaResources.Count -gt 0) {
          $swaUrl = $swaResources[0].DefaultHostname
          Write-Host "‚úÖ Infrastructure deployment complete!"
          Write-Host "üåê Frontend URL: https://$swaUrl"
          Write-Host "üîß Function App URL: https://$functionAppName.azurewebsites.net"
          Write-Host "üîó OAuth Redirect URI: https://$functionAppName.azurewebsites.net/api/github-callback"
          Write-Host ""
          Write-Host "üìã GitHub OAuth App Configuration:"
          Write-Host "   Homepage URL: https://$swaUrl"
          Write-Host "   Authorization callback URL: https://$functionAppName.azurewebsites.net/api/github-callback"
          Write-Host ""
          Write-Host "üîÑ Resources updated/created in environment: ${{ inputs.environment }}"
        } else {
          Write-Host "‚ùå Could not retrieve Static Web App URL"
          Write-Host "Checking deployed resources..."
          Get-AzResource -ResourceGroupName $resourceGroup | Format-Table Name, ResourceType
          exit 1
        }
      shell: pwsh

    - name: Azure logout
      run: az logout
      if: always()

    - name: Update Function App Settings
      if: success()
      run: |
        # Parse Azure credentials
        $creds = '${{ secrets.AZURE_CREDENTIALS }}' | ConvertFrom-Json
        $securePassword = ConvertTo-SecureString $creds.clientSecret -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($creds.clientId, $securePassword)
        Connect-AzAccount -ServicePrincipal -Credential $credential -TenantId $creds.tenantId -SubscriptionId $creds.subscriptionId
        
        $resourceGroup = "rg-gitsecureops-${{ inputs.environment }}"
        $resourceToken = "${{ inputs.environment }}"
        $functionAppName = "func-gh-$resourceToken"
        
        # Get the actual Static Web App URL for FRONTEND_URL setting
        $swaResources = Get-AzStaticWebApp -ResourceGroupName $resourceGroup
        if ($swaResources -and $swaResources.Count -gt 0) {
          $actualSwaUrl = "https://$($swaResources[0].DefaultHostname)"
          Write-Host "Updating Function App settings with Static Web App URL: $actualSwaUrl"
          
          try {
            # Update Function App FRONTEND_URL setting
            Write-Host "Updating FRONTEND_URL setting..."
            az functionapp config appsettings set \
              --resource-group $resourceGroup \
              --name $functionAppName \
              --settings "FRONTEND_URL=$actualSwaUrl" \
              --output table
            Write-Host "‚úÖ Function App FRONTEND_URL updated successfully!"
          }
          catch {
            Write-Host "‚ö†Ô∏è Warning: Could not update Function App settings: $($_.Exception.Message)"
          }
        }
        
        Disconnect-AzAccount
      shell: pwsh